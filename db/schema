CREATE SEQUENCE public.global_id_sequence;

CREATE OR REPLACE FUNCTION public.id_generator(OUT result bigint) AS $$
DECLARE
    our_epoch bigint := 1314220021721;
    seq_id bigint;
    now_millis bigint;
    -- the id of this DB shard, must be set for each
    -- schema shard you have - you could pass this as a parameter too
    shard_id int := 1;
BEGIN
    SELECT nextval('public.global_id_sequence') % 1024 INTO seq_id;

    SELECT FLOOR(EXTRACT(EPOCH FROM clock_timestamp()) * 1000) INTO now_millis;
    result := (now_millis - our_epoch) << 23;
    result := result | (shard_id << 10);
    result := result | (seq_id);
END;
$$ LANGUAGE PLPGSQL;

select public.id_generator();


CREATE TABLE IF NOT EXISTS address (
  id SERIAL PRIMARY KEY,
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  address1 VARCHAR(255) NOT NULL,
  address2 VARCHAR(255),
  city VARCHAR(255),
  state VARCHAR(2) NOT NULL,
  zip VARCHAR(255) NOT NULL,
  country VARCHAR(255) NOT NULL DEFAULT 'US',
  notes VARCHAR(5000),
  settings JSON NOT NULL DEFAULT '{}'
);

CREATE TABLE IF NOT EXISTS person(
  id BIGINT NOT NULL DEFAULT public.id_generator() PRIMARY KEY,
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  email VARCHAR(255) NOT NULL UNIQUE,
  firstname VARCHAR(255),
  lastname VARCHAR(255),
  phone VARCHAR(255),
  address_id INTEGER NOT NULL DEFAULT 0,
  password VARCHAR(255),
  token VARCHAR(255),
  role VARCHAR(255) DEFAULT 'person' NOT NULL,
  food VARCHAR(255),
  notes VARCHAR(5000),
  preferences JSON NOT NULL DEFAULT '{"language": "EN"}',
  settings JSON NOT NULL DEFAULT '{}',
  FOREIGN KEY (address_id) REFERENCES address (id)
);

CREATE TABLE IF NOT EXISTS event(
  id SERIAL PRIMARY KEY,
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  name VARCHAR(255) NOT NULL UNIQUE,
  time TIMESTAMP NOT NULL,
  address_id INTEGER,
  public BOOLEAN NOT NULL DEFAULT FALSE,
  send_invitations BOOLEAN NOT NULL,
  auto_rsvp_w_wedding BOOLEAN NOT NULL DEFAULT FALSE,
  notes VARCHAR(5000),
  settings JSON NOT NULL DEFAULT '{}',
  FOREIGN KEY (address_id) REFERENCES address (id)
);

CREATE TABLE IF NOT EXISTS attendance(
  id SERIAL PRIMARY KEY,
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  person_id BIGINT NOT NULL,
  event_id INTEGER NOT NULL,
  notes VARCHAR(5000),
  invitation_sent BOOLEAN DEFAULT FALSE,
  rsvpd BOOLEAN DEFAULT FALSE,
  rsvpyes BOOLEAN DEFAULT FALSE,
  preferences JSON NOT NULL DEFAULT '{}',
  settings JSON NOT NULL DEFAULT '{}',
  FOREIGN KEY (event_id) REFERENCES event (id),
  FOREIGN KEY (person_id) REFERENCES person (id),
  CONSTRAINT uniq_person_id_event_id UNIQUE(person_id, event_id)
);

CREATE TABLE IF NOT EXISTS groupo(
 id SERIAL PRIMARY KEY,
 createdat TIMESTAMP NOT NULL DEFAULT NOW(),
 name VARCHAR(255) NOT NULL UNIQUE,
 parent_id INTEGER,
 notes VARCHAR(5000),
 preferences JSON NOT NULL DEFAULT '{}',
 settings JSON NOT NULL DEFAULT '{}',
 FOREIGN KEY (parent_id) REFERENCES groupo (id)
);

CREATE TABLE IF NOT EXISTS groupomember(
  id SERIAL PRIMARY KEY,
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  person_id BIGINT,
  groupo_id INTEGER,
  FOREIGN KEY (person_id) REFERENCES person (id),
  FOREIGN KEY (groupo_id) REFERENCES groupo (id),
  CONSTRAINT uniq_person_id_groupo_id UNIQUE(person_id, groupo_id)
);

CREATE TABLE IF NOT EXISTS location(
  id SERIAL PRIMARY KEY,
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  name VARCHAR(255) NOT NULL UNIQUE,
  address_id INTEGER,
  notes VARCHAR(5000),
  settings JSON NOT NULL DEFAULT '{}',
  FOREIGN KEY (address_id) REFERENCES address (id)
);

CREATE TABLE IF NOT EXISTS quote(
  id SERIAL PRIMARY KEY,
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  text VARCHAR(5000),
  author VARCHAR(255),
  settings JSON NOT NULL DEFAULT '{}'
);

CREATE TABLE IF NOT EXISTS quotemember(
  id SERIAL PRIMARY KEY,
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  person_id BIGINT,
  quote_id INT,
  FOREIGN KEY (person_id) REFERENCES person (id),
  FOREIGN KEY (quote_id) REFERENCES quote (id),
  CONSTRAINT uniq_person_id_quote_id UNIQUE(person_id, quote_id)
);

CREATE TABLE IF NOT EXISTS blog(
  id SERIAL PRIMARY KEY,
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  date DATE NOT NULL,
  title VARCHAR(50000) NOT NULL,
  text VARCHAR(50000) NOT NULL,
  settings JSON NOT NULL DEFAULT '{}'
);

CREATE TABLE IF NOT EXISTS song(
  id SERIAL PRIMARY KEY,
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  artist VARCHAR(255) NOT NULL,
  title VARCHAR(255) NOT NULL,
  url VARCHAR(255) NOT NULL,
  notes VARCHAR(5000),
  html VARCHAR(5000),
  settings JSON NOT NULL DEFAULT '{}'
);

CREATE TABLE IF NOT EXISTS list(
  id SERIAL PRIMARY KEY,
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  name VARCHAR(255) NOT NULL UNIQUE,
  settings TEXT NOT NULL DEFAULT '{}'
);

CREATE TABLE IF NOT EXISTS listmember(
  id SERIAL PRIMARY KEY,
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  person_id BIGINT UNIQUE,
  list_id INT,
  settings TEXT NOT NULL DEFAULT '{}',
  FOREIGN KEY (list_id) REFERENCES list (id),
  FOREIGN KEY (person_id) REFERENCES person (id),
  CONSTRAINT uniq_person_id_list_id UNIQUE(person_id, list_id)
);

=====================
/*
CREATE TABLE IF NOT EXISTS session(
  id BIGINT NOT NULL DEFAULT public.id_generator(),
  createdat TIMESTAMP NOT NULL DEFAULT NOW(),
  person_id BIGINT,
  start_time TIME NOT NULL,
  admin BOOLEAN,
  FOREIGN KEY (person_id) REFERENCES person (id)
); */
